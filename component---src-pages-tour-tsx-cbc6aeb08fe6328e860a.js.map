{"version":3,"sources":["webpack:///./src/components/presentation/presentation.tsx","webpack:///./src/pages/tour.tsx","webpack:///./src/components/intro/color.tsx"],"names":["Presentation","data","useStaticQuery","className","style","data-background-color","fontFamily","color","src","image","childImageSharp","fluid","border","image1","width","fontSize","image2","data-state","image3","image4","image11","image6","image7","image8","image9","image10","image5","image12","title","Color","children","words","split","length","map","word","index","ColoredWord","key","renderWords","colors","brand","primary"],"mappings":"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","file":"component---src-pages-tour-tsx-cbc6aeb08fe6328e860a.js","sourcesContent":["import React, { FunctionComponent } from \"react\"\r\nimport styled from \"@emotion/styled\"\r\nimport { widths, breakpoints, colors } from \"../../styles/variables\"\r\nimport { rem } from \"../../styles/mixins\"\r\nimport {reveal_initialize} from '../../hooks/useRevealInit';\r\nimport 'reveal.js/dist/reveal.js';\r\nimport 'reveal.js/dist/reveal.css';\r\nimport 'reveal.js/dist/theme/solarized.css';\r\nimport { graphql, useStaticQuery } from \"gatsby\"\r\nimport { Color } from \"../../components/intro/color\"\r\nimport { Highlight } from \"../intro/highlight\";\r\n\r\nexport const Presentation: FunctionComponent = () => {\r\n\r\n\tconst data = useStaticQuery(graphql`\r\n\t\tquery Fridge{\r\n\t\t\timage: file(relativePath: { eq: \"smartkitchen.webp\" }) {\r\n\t\t\tchildImageSharp {\r\n\t\t\t\tfluid {\r\n\t\t\t\t...GatsbyImageSharpFluid\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t}\r\n\t\t\timage1: file(relativePath: { eq: \"Samsung.jpg\" }) {\r\n\t\t\t\tchildImageSharp {\r\n\t\t\t\t\tfluid {\r\n\t\t\t\t\t...GatsbyImageSharpFluid\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\timage2: file(relativePath: { eq: \"LG.jpg\" }) {\r\n\t\t\t\tchildImageSharp {\r\n\t\t\t\t\tfluid {\r\n\t\t\t\t\t...GatsbyImageSharpFluid\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\timage3: file(relativePath: { eq: \"harvard.png\" }) {\r\n\t\t\t\tchildImageSharp {\r\n\t\t\t\t\tfluid {\r\n\t\t\t\t\t...GatsbyImageSharpFluid\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\timage4: file(relativePath: { eq: \"usahealth.png\" }) {\r\n\t\t\t\tchildImageSharp {\r\n\t\t\t\t\tfluid {\r\n\t\t\t\t\t...GatsbyImageSharpFluid\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\timage5: file(relativePath: { eq: \"leeds.png\" }) {\r\n\t\t\t\tchildImageSharp {\r\n\t\t\t\t\tfluid {\r\n\t\t\t\t\t...GatsbyImageSharpFluid\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\timage6: file(relativePath: { eq: \"FRI.jpg\" }) {\r\n\t\t\t\tchildImageSharp {\r\n\t\t\t\t\tfluid {\r\n\t\t\t\t\t...GatsbyImageSharpFluid\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\timage7: file(relativePath: { eq: \"JCP.png\" }) {\r\n\t\t\t\tchildImageSharp {\r\n\t\t\t\t\tfluid {\r\n\t\t\t\t\t...GatsbyImageSharpFluid\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\timage8: file(relativePath: { eq: \"ucc.png\" }) {\r\n\t\t\t\tchildImageSharp {\r\n\t\t\t\t\tfluid {\r\n\t\t\t\t\t...GatsbyImageSharpFluid\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\timage9: file(relativePath: { eq: \"trento.jpeg\" }) {\r\n\t\t\t\tchildImageSharp {\r\n\t\t\t\t\tfluid {\r\n\t\t\t\t\t...GatsbyImageSharpFluid\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\timage10: file(relativePath: { eq: \"maa.jpg\" }) {\r\n\t\t\t\tchildImageSharp {\r\n\t\t\t\t\tfluid {\r\n\t\t\t\t\t...GatsbyImageSharpFluid\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\timage11: file(relativePath: { eq: \"app.jpg\" }) {\r\n\t\t\t\tchildImageSharp {\r\n\t\t\t\t\tfluid {\r\n\t\t\t\t\t...GatsbyImageSharpFluid\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\timage12: file(relativePath: { eq: \"dataset.png\" }) {\r\n\t\t\t\tchildImageSharp {\r\n\t\t\t\t\tfluid {\r\n\t\t\t\t\t...GatsbyImageSharpFluid\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t}\r\n\t`)\r\n\r\n return  <>\r\n\t\r\n\t<div className = \"reveal\" style={{\"width\":\"100%\", \"height\":\"480px\"}}>\r\n\t\t<br/>\r\n\t\t<br/>\r\n\t\t<br/>\r\n\t\t<br/>\r\n\t\t<br/>\r\n\t\t<br/>\r\n\t\t<br/>\r\n\t\t<br/>\r\n\t\t<div className = \"slides\">\r\n\t\t\t<section data-background-color=\"rgb(31, 42, 60)\">\r\n\t\t\t\t<h3>Take a tour to learn the story of</h3>\r\n\t\t\t\t<h2 style={{fontFamily:\"Cutive Mono, monospace\", color:\"cornsilk\"}}>REBRIDGERATOR</h2>\r\n\t\t\t</section>\r\n\t\t\t<section data-background-color=\"rgb(252, 114, 106)\">\r\n\t\t\t\t<h1>üçîI can't decide what to eatü•¶</h1>\r\n\t\t\t</section>\r\n\t\t\t<section data-background-color=\"rgb(231, 54, 85)\" style={{fontFamily:\"Cutive Mono, monospace\"}}>\r\n\t\t\t\t<section>In this age of Internet of Things [IoT]\r\n\t\t\t\t<img src={data.image.childImageSharp.fluid.src} border=\"8\"/>\r\n\t\t\t\t<br/>Our houses, especially kitchens, are becoming smarter already\r\n\t\t\t\t</section>\r\n\t\t\t\t<section>Samsung RS5300 can help recommend recipes per your personalized dietary preferences\r\n\t\t\t\t<img src={data.image1.childImageSharp.fluid.src} border=\"8\" width=\"650px\"/>\r\n\t\t\t\t<br/>it can create meal plans based on your current inventory, and prepare shopping lists, generate recipes based on inventory.\r\n\t\t\t\t</section>\r\n\t\t\t\t<section style={{fontSize:\"38px\"}}>LG InstaView Smart Fridges can detect the food inside the fridge,\t\t\t\t\r\n\t\t\t\t\t<img src={data.image2.childImageSharp.fluid.src} border=\"8\" width=\"550px\"/>\r\n\t\t\t\t<br/>alerts users when some ingredients are going bad, suggests recipes based on what you have in stock, and writes shopping lists for you.\r\n\t\t\t\t</section>\r\n\t\t\t\t<section data-state=\"make-it-pop\">What's in the fridge?<br/>What can I cook from it?<br/>What ingredients I am running out of?<br/>...<br/>...<br/>Is that all we can do?</section>\r\n\t\t\t</section>\r\n\t\t\t<section data-background-color=\"rgb(255, 255, 255)\" style={{fontFamily:\"Cutive Mono, monospace\"}}>\r\n\t\t\t<section>\r\n\t\t\t<img src={data.image3.childImageSharp.fluid.src} border=\"8\" width=\"250px\"/>\r\n\t\t\t<img src={data.image4.childImageSharp.fluid.src} border=\"8\" width=\"131px\"/>\r\n\t\t\t<img src={data.image11.childImageSharp.fluid.src} border=\"8\" width=\"150px\"/>\r\n\t\t\t<img src={data.image6.childImageSharp.fluid.src} border=\"8\" width=\"150px\"/>\r\n\t\t\t<img src={data.image7.childImageSharp.fluid.src} border=\"8\" width=\"200px\"/>\r\n\t\t\tNutritional psychiatry says what you <Color>eat</Color> has a lot to do with how you <Color>feel</Color>\r\n\t\t\t<br/><img src={data.image8.childImageSharp.fluid.src} border=\"8\" width=\"350px\"/>\r\n\t\t\t<img src={data.image9.childImageSharp.fluid.src} border=\"8\" width=\"225px\"/>\r\n\t\t\t<img src={data.image10.childImageSharp.fluid.src} border=\"8\" width=\"323px\"/>\r\n\t\t\t<img src={data.image5.childImageSharp.fluid.src} border=\"8\" width=\"150px\"/>\r\n\t\t\t</section>\r\n\t\t\t\r\n\t\t\t</section>\r\n\t\t\t<section data-background-color=\"rgb(231, 54, 85)\" style={{fontFamily:\"Cutive Mono, monospace\"}}>\r\n\t\t\t\t<section>But let's not get ahead of ourselves...<br/><br/>We still need to figure out how exactly the <Color>food</Color> in the fridge is getting detected.</section>\r\n\t\t\t\t<section>Most object classifiers are quite well-trained on state-of-the-art <Color>convolutional</Color> <Color>neural</Color> <Color>networks</Color> like;<br/><br/>AlexNet, <Color>VGG</Color>, <Color>ResNet</Color>, DenseNet, <Color>Inception v3</Color>, GoogLeNet, MobileNet, EfficientNet <br/><br/>I picked the highlighted ones to train our data because of the speed of training and resources I had available to us. </section>\r\n\t\t\t\t<section>Where is the <Color>data</Color>?<br/><br/>Out of 8 publicly available datasets on grocery items, I found one most suitable to the application: <br/><br/>Freiburg Groceries Dataset by University of Freiburg</section>\r\n\t\t\t\t<section>It has 25 classes and ~5000 images;<br/>Beans, Cake, Candy, Cereal, Chips, Chocolate, Coffee, Corn, Fish, Flour<img src={data.image12.childImageSharp.fluid.src} border=\"8\" width=\"750px\"/><br/>Honey, Jam, Juice, Milk, Nuts, Oil, Pasta, Rice, Soda, Spices, Sugar, Tea, Tomato Sauce, Vinegar, Water</section>\r\n\t\t\t\t<section>So far <Color>VGG16</Color> is the fastest and least resource consuming model performing at 76.16% accuracy.<br/><br/>I plan to finetune it and play around with the learning rate scheduler more.</section>\r\n\t\t\t\t<section data-background-color=\"rgb(255, 255, 255)\">But ingredients in the fridge are seldom organized and spaced out.<br/><br/>We need to detect and segment items/ingredients before we can classify them.</section>\r\n\t\t\t</section>\r\n\t\t\t<section data-background-color=\"rgb(255, 255, 255)\">\r\n\t\t\t\t<section>Affectiva SDK</section>\r\n\t\t\t</section>\r\n\t\t\t<section data-background-color=\"rgb(231, 54, 85)\">\r\n\t\t\t\t<section>Decision Tree</section>\r\n\t\t\t</section>\r\n\t\t\t<section data-background-color=\"rgb(255, 255, 255)\">\r\n\t\t\t\t<section>Benefit</section>\r\n\t\t\t</section>\r\n\t\t\t<section data-background-color=\"rgb(231, 54, 85)\">\r\n\t\t\t\t<section>Revenue</section>\r\n\t\t\t</section>\r\n\t\t</div>\r\n\t</div>\r\n\t\r\n</>\r\n}\r\n","import React from \"react\"\r\n\r\nimport { Intro } from \"../components/intro\"\r\nimport { Highlight } from \"../components/intro/highlight\"\r\nimport { Banner } from \"../components/banner\"\r\nimport { Container } from \"../components/container\"\r\nimport { Canberra } from \"../components/canberra\"\r\nimport { Link } from \"../components/link\"\r\nimport { Presentation } from \"../components/presentation\"\r\nimport { SpringFadeUp, TrailFadeUp } from \"../utils/animations\"\r\n\r\nexport default () => (\r\n\t<>\r\n\t\t<Canberra title=\"Tour\" />\r\n\r\n\t\t<Container >\r\n\t\t\t\t<SpringFadeUp>\r\n\t\t\t\t\t<Presentation/>\r\n\t\t\t\t</SpringFadeUp>\r\n\t\t\t\r\n\t\t</Container>\r\n\t</>\r\n)\r\n","import React from \"react\"\r\nimport styled from \"@emotion/styled\"\r\nimport { colors } from \"../../styles/variables\"\r\nimport { rem } from \"../../styles/mixins\"\r\n\r\ninterface IColorProps {\r\n\tchildren: string\r\n}\r\n\r\nexport const Color = ({ children }: IColorProps) => {\r\n\tconst renderWords = () => {\r\n\t\tconst words = children.split(\" \")\r\n\t\tconst { length } = words\r\n\r\n\t\treturn words.map((word, index) => (\r\n\t\t\t<ColoredWord key={word}>\r\n\t\t\t\t<b>{word}</b>\r\n\t\t\t\t<span />\r\n\t\t\t</ColoredWord>\r\n\t\t))\r\n\t}\r\n\r\n\treturn <>{renderWords()}</>\r\n}\r\n\r\nconst ColoredWord = styled.span`\r\n\tcolor: ${colors.brand.primary}\r\n`\r\n"],"sourceRoot":""}